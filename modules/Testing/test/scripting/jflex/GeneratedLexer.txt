/* It's an automatically generated code. Do not modify it. */
package scripting.jflex;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


class GroovyPythonLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\24\1\10\1\0\1\25\1\10\22\0\1\23\1\66\1\22"+
    "\1\7\1\0\1\60\1\61\1\20\1\70\1\71\1\56\1\54\1\77"+
    "\1\14\1\12\1\57\1\1\7\3\2\2\1\100\1\102\1\65\1\55"+
    "\1\64\1\0\1\76\4\4\1\13\1\4\3\11\1\15\1\11\1\6"+
    "\5\11\1\17\2\11\1\16\2\11\1\5\2\11\1\72\1\21\1\73"+
    "\1\63\1\11\1\101\1\26\1\35\1\37\1\30\1\32\1\44\1\51"+
    "\1\53\1\42\1\15\1\36\1\40\1\50\1\27\1\41\1\46\1\11"+
    "\1\33\1\31\1\34\1\43\1\11\1\52\1\45\1\47\1\11\1\74"+
    "\1\62\1\75\1\67\uff81\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private final int [] ZZ_ACTION = null;

  private  final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\3\1\10\1\11\1\10\1\12\1\13\1\14\20\3"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\1\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\2"+
    "\2\0\1\2\1\43\1\0\1\44\1\45\6\10\15\3"+
    "\1\46\1\47\1\50\1\51\11\3\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\1\2\1\43\1\0"+
    "\1\10\2\0\1\72\1\3\1\73\1\74\1\75\6\3"+
    "\1\76\6\3\1\77\6\3\1\100\1\101\1\102\1\103"+
    "\2\0\1\3\1\104\1\105\1\106\10\3\1\107\1\3"+
    "\1\110\4\3\2\0\2\3\1\111\1\3\1\112\1\113"+
    "\4\3\1\114\1\115\1\3\1\116\2\0\1\117\1\120"+
    "\1\121\1\3\1\122\1\123\1\3\1\124\2\10\1\3"+
    "\1\125\2\10\1\126\2\10";

  private int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      while ( true ) {
        result[j++] = value;
        if (--count <= 0) break;
      }
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private final int [] ZZ_ROWMAP = null;

  private  final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\103\0\u0324\0\103\0\103"+
    "\0\103\0\u0367\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9"+
    "\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711"+
    "\0\u0754\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929"+
    "\0\u096c\0\u09af\0\u09f2\0\u0a35\0\103\0\103\0\103\0\103"+
    "\0\103\0\103\0\103\0\103\0\103\0\103\0\103\0\103"+
    "\0\u0a78\0\u0abb\0\u0afe\0\103\0\u0b41\0\u0b84\0\103\0\103"+
    "\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c"+
    "\0\u0ddf\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4"+
    "\0\u0ff7\0\u103a\0\u107d\0\u010c\0\u010c\0\u010c\0\u010c\0\u10c0"+
    "\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f\0\u1252\0\u1295\0\u12d8"+
    "\0\103\0\103\0\103\0\u131b\0\103\0\u135e\0\103\0\103"+
    "\0\103\0\103\0\103\0\u13a1\0\103\0\103\0\u13e4\0\103"+
    "\0\u1427\0\u146a\0\u146a\0\103\0\u14ad\0\u14f0\0\u010c\0\u1533"+
    "\0\u010c\0\u010c\0\u010c\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682"+
    "\0\u16c5\0\u010c\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857"+
    "\0\u010c\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\103"+
    "\0\103\0\103\0\103\0\u1a2c\0\u1a6f\0\u1ab2\0\u010c\0\u010c"+
    "\0\u010c\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u010c\0\u1d0d\0\u010c\0\u1d50\0\u1d93\0\u1dd6\0\u1e19"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u010c\0\u1f68\0\u010c\0\u010c"+
    "\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u010c\0\u010c\0\u20b7\0\u010c"+
    "\0\u20fa\0\u213d\0\u010c\0\u010c\0\u010c\0\u2180\0\u010c\0\u010c"+
    "\0\u21c3\0\u010c\0\u2206\0\u2249\0\u228c\0\u010c\0\u22cf\0\u2312"+
    "\0\u010c\0\u2355\0\u2398";

  private int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int highVal = packed.charAt(i++);
      int lowVal = packed.charAt(i++);
      int high = highVal << 16;
      result[j++] = high | lowVal;
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private final int [] ZZ_TRANS = null;

  private  final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\3\5\1\6\1\7\1\5\1\10"+
    "\1\5\1\11\1\5\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\5\1\25"+
    "\1\26\1\27\1\30\1\5\1\31\1\32\1\33\1\34"+
    "\1\12\1\35\1\5\1\36\1\37\1\5\1\40\1\41"+
    "\1\5\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\104\0\1\71\1\72\1\71\1\0\1\73\1\74\3\0"+
    "\1\75\1\76\1\0\1\77\14\0\1\76\5\0\1\74"+
    "\4\0\1\73\36\0\3\4\2\0\1\74\3\0\1\75"+
    "\1\76\1\0\1\77\14\0\1\76\5\0\1\74\43\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\26\5\27\0\10\6\1\0\72\6\10\0\1\7\73\0"+
    "\3\75\154\0\1\100\26\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\2\5\1\13\1\14\1\0\1\16\3\0"+
    "\5\5\1\13\20\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\1\14\1\0\1\16\3\0\26\5"+
    "\27\0\10\101\1\0\7\101\1\102\1\103\61\101\10\104"+
    "\1\0\10\104\1\105\1\106\60\104\1\0\6\5\2\0"+
    "\1\5\1\0\1\5\1\0\3\5\6\0\1\5\1\107"+
    "\1\5\1\110\22\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\13\5\1\111\12\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\4\5\1\112\21\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\12\5\1\113\4\5\1\114"+
    "\6\5\30\0\6\5\2\0\1\5\1\0\1\5\1\0"+
    "\3\5\1\14\1\0\1\16\3\0\1\115\3\5\1\116"+
    "\21\5\30\0\6\5\2\0\1\5\1\0\1\5\1\0"+
    "\3\5\6\0\5\5\1\117\20\5\30\0\6\5\2\0"+
    "\1\5\1\0\1\5\1\0\3\5\6\0\5\5\1\120"+
    "\20\5\30\0\6\5\2\0\1\5\1\0\1\5\1\0"+
    "\3\5\6\0\12\5\1\121\1\122\12\5\30\0\6\5"+
    "\2\0\1\5\1\0\1\5\1\0\3\5\6\0\1\123"+
    "\25\5\30\0\6\5\2\0\1\5\1\0\1\5\1\0"+
    "\3\5\6\0\5\5\1\124\20\5\30\0\6\5\2\0"+
    "\1\5\1\0\1\5\1\0\3\5\6\0\1\5\1\125"+
    "\1\5\1\126\12\5\1\127\3\5\1\130\3\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\5\5\1\131\5\5\1\132\1\133\11\5\30\0\6\5"+
    "\2\0\1\5\1\0\1\5\1\0\3\5\6\0\1\134"+
    "\4\5\1\135\20\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\14\5\1\136\11\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\12\5\1\137\13\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\25\5\1\140\104\0\1\141"+
    "\102\0\1\142\102\0\1\143\1\144\101\0\1\145\1\0"+
    "\1\146\100\0\1\147\102\0\1\150\102\0\1\151\102\0"+
    "\1\152\102\0\1\153\6\0\1\154\73\0\1\155\6\0"+
    "\1\156\1\157\72\0\1\160\26\0\1\71\1\72\1\71"+
    "\2\0\1\74\3\0\1\75\1\76\1\0\1\77\14\0"+
    "\1\76\5\0\1\74\43\0\3\72\6\0\1\75\1\76"+
    "\1\0\1\77\14\0\1\76\51\0\4\161\6\0\1\161"+
    "\12\0\1\161\1\0\1\161\1\0\1\161\2\0\1\161"+
    "\1\0\1\161\4\0\1\161\37\0\3\75\7\0\1\76"+
    "\16\0\1\76\51\0\3\162\10\0\1\163\37\0\1\163"+
    "\26\0\10\101\1\0\7\101\1\164\1\103\61\101\20\0"+
    "\1\165\62\0\103\101\10\104\1\0\10\104\1\105\1\164"+
    "\163\104\22\0\1\166\61\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\2\5\1\167\23\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\3\5\1\170\22\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\6\5\1\171\17\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\12\5\1\172\3\5\1\173\7\5\30\0\6\5\2\0"+
    "\1\5\1\0\1\5\1\0\3\5\6\0\3\5\1\174"+
    "\10\5\1\175\11\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\4\5\1\176\4\5\1\177"+
    "\14\5\30\0\6\5\2\0\1\5\1\0\1\5\1\0"+
    "\3\5\6\0\14\5\1\200\11\5\30\0\6\5\2\0"+
    "\1\5\1\0\1\5\1\0\3\5\6\0\6\5\1\201"+
    "\17\5\30\0\6\5\2\0\1\5\1\0\1\5\1\0"+
    "\3\5\6\0\21\5\1\202\4\5\30\0\6\5\2\0"+
    "\1\5\1\0\1\5\1\0\3\5\6\0\4\5\1\203"+
    "\21\5\30\0\6\5\2\0\1\5\1\0\1\5\1\0"+
    "\3\5\6\0\1\204\25\5\30\0\6\5\2\0\1\5"+
    "\1\0\1\5\1\0\3\5\6\0\1\5\1\205\24\5"+
    "\30\0\6\5\2\0\1\5\1\0\1\5\1\0\3\5"+
    "\6\0\22\5\1\206\3\5\30\0\6\5\2\0\1\5"+
    "\1\0\1\5\1\0\3\5\6\0\20\5\1\207\5\5"+
    "\30\0\6\5\2\0\1\5\1\0\1\5\1\0\3\5"+
    "\6\0\13\5\1\210\12\5\30\0\6\5\2\0\1\5"+
    "\1\0\1\5\1\0\3\5\6\0\5\5\1\211\20\5"+
    "\30\0\6\5\2\0\1\5\1\0\1\5\1\0\3\5"+
    "\6\0\1\5\1\212\24\5\30\0\6\5\2\0\1\5"+
    "\1\0\1\5\1\0\3\5\6\0\3\5\1\213\22\5"+
    "\30\0\6\5\2\0\1\5\1\0\1\5\1\0\3\5"+
    "\6\0\14\5\1\214\11\5\30\0\6\5\2\0\1\5"+
    "\1\0\1\5\1\0\3\5\6\0\4\5\1\215\21\5"+
    "\30\0\6\5\2\0\1\5\1\0\1\5\1\0\3\5"+
    "\6\0\13\5\1\216\12\5\30\0\6\5\2\0\1\5"+
    "\1\0\1\5\1\0\3\5\6\0\14\5\1\217\11\5"+
    "\104\0\1\220\102\0\1\221\102\0\1\222\102\0\1\223"+
    "\26\0\4\161\1\0\1\74\4\0\1\161\12\0\1\161"+
    "\1\0\1\161\1\0\1\161\2\0\1\161\1\0\1\161"+
    "\1\74\3\0\1\161\37\0\3\162\77\0\21\224\1\165"+
    "\61\224\21\225\1\166\61\225\1\0\6\5\2\0\1\5"+
    "\1\0\1\5\1\0\3\5\6\0\4\5\1\226\21\5"+
    "\30\0\6\5\2\0\1\5\1\0\1\5\1\0\3\5"+
    "\6\0\4\5\1\227\21\5\30\0\6\5\2\0\1\5"+
    "\1\0\1\5\1\0\3\5\6\0\16\5\1\230\7\5"+
    "\30\0\6\5\2\0\1\5\1\0\1\5\1\0\3\5"+
    "\6\0\11\5\1\231\14\5\30\0\6\5\2\0\1\5"+
    "\1\0\1\5\1\0\3\5\6\0\4\5\1\232\21\5"+
    "\30\0\6\5\2\0\1\5\1\0\1\5\1\0\3\5"+
    "\6\0\3\5\1\233\22\5\30\0\6\5\2\0\1\5"+
    "\1\0\1\5\1\0\3\5\6\0\15\5\1\234\10\5"+
    "\30\0\6\5\2\0\1\5\1\0\1\5\1\0\3\5"+
    "\6\0\1\235\25\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\3\5\1\236\22\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\6\5\1\237\17\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\7\5\1\240\16\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\13\5\1\241\12\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\22\5\1\242\3\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\1\243\25\5\30\0\6\5\2\0\1\5\1\0\1\5"+
    "\1\0\3\5\6\0\3\5\1\244\22\5\30\0\6\5"+
    "\2\0\1\5\1\0\1\5\1\0\3\5\6\0\1\5"+
    "\1\245\24\5\30\0\6\5\2\0\1\5\1\0\1\5"+
    "\1\0\3\5\6\0\12\5\1\246\13\5\30\0\6\5"+
    "\2\0\1\5\1\0\1\5\1\0\3\5\6\0\7\5"+
    "\1\247\16\5\30\0\6\5\2\0\1\5\1\0\1\5"+
    "\1\0\3\5\6\0\12\5\1\250\13\5\27\0\20\224"+
    "\1\251\1\165\61\224\21\225\1\166\1\252\60\225\1\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\5\5\1\253\20\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\20\5\1\254\5\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\4\5\1\255\21\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\5\5\1\256\20\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\10\5\1\257\15\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\3\5\1\260\22\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\14\5\1\261\11\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\2\5\1\262\23\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\5\5\1\263\20\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\12\5\1\264\13\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\6\5\1\265\17\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\2\5\1\266\23\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\1\267\25\5\30\0\6\5\2\0\1\5\1\0\1\5"+
    "\1\0\3\5\6\0\4\5\1\270\21\5\27\0\20\224"+
    "\1\271\1\165\61\224\21\225\1\166\1\272\60\225\1\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\6\5\1\273\17\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\6\5\1\274\17\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\1\5\1\275\24\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\1\5\1\276\24\5\30\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\1\277\25\5\30\0\6\5\2\0\1\5\1\0\1\5"+
    "\1\0\3\5\6\0\6\5\1\300\17\5\30\0\6\5"+
    "\2\0\1\5\1\0\1\5\1\0\3\5\6\0\12\5"+
    "\1\301\13\5\30\0\6\5\2\0\1\5\1\0\1\5"+
    "\1\0\3\5\6\0\12\5\1\302\13\5\27\0\20\224"+
    "\1\303\1\165\61\224\21\225\1\166\1\304\60\225\1\0"+
    "\6\5\2\0\1\5\1\0\1\5\1\0\3\5\6\0"+
    "\15\5\1\305\10\5\30\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\21\5\1\306\4\5\47\0"+
    "\1\307\104\0\1\310\61\0\6\5\2\0\1\5\1\0"+
    "\1\5\1\0\3\5\6\0\4\5\1\311\21\5\47\0"+
    "\1\312\104\0\1\313\100\0\1\164\104\0\1\164\60\0";

  private int [] zzUnpackTrans() {
    int [] result = new int[9179];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      while ( true ) {
        result[j++] = value;
        if (--count <= 0) break;
      }
    }
    return j;
  }


  /* error codes */
  private final int ZZ_UNKNOWN_ERROR = 0;
  private final int ZZ_NO_MATCH = 1;
  private final int ZZ_PUSHBACK_2BIG = 2;
  private final char[] EMPTY_BUFFER = new char[0];
  private final int YYEOF = -1;
  private java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private final String[] ZZ_ERROR_MSG = [
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  ];

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final int [] ZZ_ATTRIBUTE = null;

  private  final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\12\1\1\11\1\1\3\11\33\1\14\11"+
    "\1\1\2\0\1\11\1\1\1\0\2\11\40\1\3\11"+
    "\1\1\1\11\1\1\5\11\1\1\2\11\1\1\1\11"+
    "\2\1\1\0\1\11\2\0\31\1\4\11\2\0\23\1"+
    "\2\0\16\1\2\0\21\1";

  private int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      while ( true ) {
        result[j++] = value;
        if (--count <= 0) break;
      }
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
GroovyPythonLexer() {
    ZZ_ACTION = zzUnpackAction();
    ZZ_ROWMAP = zzUnpackRowMap();
    ZZ_TRANS = zzUnpackTrans();
    ZZ_ATTRIBUTE = zzUnpackAttribute();
}
private Object tokenTypes = null;
void setLanguage(Object language) {
    this.tokenTypes = language.getTokenTypes();
}


  GroovyPythonLexer(java.io.Reader reader) {
    this.zzReader = reader;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   stream  the java.io.Inputstream to read input from.
   */
  GroovyPythonLexer(java.io.InputStream stream) {
    this(new java.io.InputStreamReader(stream));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      while ( true ) {
        map[j++] = value;
        if (--count <= 0) break;
      }
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 23:
          return tokenTypes.TILDE;

        case 87: break;
        case 20:
          return tokenTypes.XOR;

        case 88: break;
        case 76:
          return tokenTypes.PRINT_KEYWORD;

        case 89: break;
        case 16:
          return tokenTypes.DIV;

        case 90: break;
        case 29:
          return tokenTypes.RBRACE;

        case 91: break;
        case 55:
          return tokenTypes.NE_OLD;

        case 92: break;
        case 17:
          return tokenTypes.PERC;

        case 93: break;
        case 25:
          return tokenTypes.RPAR;

        case 94: break;
        case 52:
          return tokenTypes.GE;

        case 95: break;
        case 38:
          return tokenTypes.OR_KEYWORD;

        case 96: break;
        case 2:
          return tokenTypes.INTEGER_LITERAL;

        case 97: break;
        case 7:
          return tokenTypes.MINUS;

        case 98: break;
        case 6:
          return tokenTypes.DOT;

        case 99: break;
        case 68:
          return tokenTypes.ELSE_KEYWORD;

        case 100: break;
        case 28:
          return tokenTypes.LBRACE;

        case 101: break;
        case 24:
          return tokenTypes.LPAR;

        case 102: break;
        case 14:
          return tokenTypes.EQ;

        case 103: break;
        case 35:
          return tokenTypes.FLOAT_LITERAL;

        case 104: break;
        case 40:
          return tokenTypes.IS_KEYWORD;

        case 105: break;
        case 10:
          return tokenTypes.SPACE;

        case 106: break;
        case 75:
          return tokenTypes.CLASS_KEYWORD;

        case 107: break;
        case 37:
          return tokenTypes.MINUSEQ;

        case 108: break;
        case 5:
          return tokenTypes.LINE_BREAK;

        case 109: break;
        case 9:
          return tokenTypes.BACKSLASH;

        case 110: break;
        case 27:
          return tokenTypes.RBRACKET;

        case 111: break;
        case 66:
          return tokenTypes.GTGTEQ;

        case 112: break;
        case 8:
          return tokenTypes.STRING_LITERAL;

        case 113: break;
        case 32:
          return tokenTypes.COLON;

        case 114: break;
        case 65:
          return tokenTypes.FLOORDIVEQ;

        case 115: break;
        case 80:
          return tokenTypes.EXCEPT_KEYWORD;

        case 116: break;
        case 41:
          return tokenTypes.IF_KEYWORD;

        case 117: break;
        case 70:
          return tokenTypes.EXEC_KEYWORD;

        case 118: break;
        case 72:
          return tokenTypes.PASS_KEYWORD;

        case 119: break;
        case 77:
          return tokenTypes.YIELD_KEYWORD;

        case 120: break;
        case 15:
          return tokenTypes.MULT;

        case 121: break;
        case 12:
          return tokenTypes.FORMFEED;

        case 122: break;
        case 67:
          return tokenTypes.LTLTEQ;

        case 123: break;
        case 1:
          return tokenTypes.BAD_CHARACTER;

        case 124: break;
        case 22:
          return tokenTypes.LT;

        case 125: break;
        case 85:
          return tokenTypes.FINALLY_KEYWORD;

        case 126: break;
        case 58:
          return tokenTypes.AND_KEYWORD;

        case 127: break;
        case 26:
          return tokenTypes.LBRACKET;

        case 128: break;
        case 44:
          return tokenTypes.MULTEQ;

        case 129: break;
        case 63:
          return tokenTypes.FOR_KEYWORD;

        case 130: break;
        case 59:
          return tokenTypes.NOT_KEYWORD;

        case 131: break;
        case 45:
          return tokenTypes.EXP;

        case 132: break;
        case 13:
          return tokenTypes.PLUS;

        case 133: break;
        case 31:
          return tokenTypes.COMMA;

        case 134: break;
        case 43:
          return tokenTypes.EQEQ;

        case 135: break;
        case 33:
          return tokenTypes.TICK;

        case 136: break;
        case 79:
          return tokenTypes.ASSERT_KEYWORD;

        case 137: break;
        case 74:
          return tokenTypes.BREAK_KEYWORD;

        case 138: break;
        case 34:
          return tokenTypes.SEMICOLON;

        case 139: break;
        case 84:
          return tokenTypes.GLOBAL_KEYWORD;

        case 140: break;
        case 82:
          return tokenTypes.LAMBDA_KEYWORD;

        case 141: break;
        case 3:
          return tokenTypes.IDENTIFIER;

        case 142: break;
        case 56:
          return tokenTypes.LTLT;

        case 143: break;
        case 47:
          return tokenTypes.FLOORDIV;

        case 144: break;
        case 71:
          return tokenTypes.FROM_KEYWORD;

        case 145: break;
        case 73:
          return tokenTypes.RAISE_KEYWORD;

        case 146: break;
        case 21:
          return tokenTypes.GT;

        case 147: break;
        case 39:
          return tokenTypes.IN_KEYWORD;

        case 148: break;
        case 51:
          return tokenTypes.XOREQ;

        case 149: break;
        case 69:
          return tokenTypes.ELIF_KEYWORD;

        case 150: break;
        case 18:
          return tokenTypes.AND;

        case 151: break;
        case 62:
          return tokenTypes.TRY_KEYWORD;

        case 152: break;
        case 50:
          return tokenTypes.OREQ;

        case 153: break;
        case 19:
          return tokenTypes.OR;

        case 154: break;
        case 53:
          return tokenTypes.GTGT;

        case 155: break;
        case 46:
          return tokenTypes.DIVEQ;

        case 156: break;
        case 61:
          return tokenTypes.DEF_KEYWORD;

        case 157: break;
        case 86:
          return tokenTypes.CONTINUE_KEYWORD;

        case 158: break;
        case 36:
          return tokenTypes.IMAGINARY_LITERAL;

        case 159: break;
        case 30:
          return tokenTypes.AT;

        case 160: break;
        case 78:
          return tokenTypes.WHILE_KEYWORD;

        case 161: break;
        case 49:
          return tokenTypes.ANDEQ;

        case 162: break;
        case 57:
          return tokenTypes.NE;

        case 163: break;
        case 42:
          return tokenTypes.PLUSEQ;

        case 164: break;
        case 81:
          return tokenTypes.RETURN_KEYWORD;

        case 165: break;
        case 83:
          return tokenTypes.IMPORT_KEYWORD;

        case 166: break;
        case 60:
          return tokenTypes.DEL_KEYWORD;

        case 167: break;
        case 11:
          return tokenTypes.TAB;

        case 168: break;
        case 48:
          return tokenTypes.PERCEQ;

        case 169: break;
        case 64:
          return tokenTypes.EXPEQ;

        case 170: break;
        case 54:
          return tokenTypes.LE;

        case 171: break;
        case 4:
          return tokenTypes.END_OF_LINE_COMMENT;

        case 172: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

return GroovyPythonLexer.class

